Index: app/src/main/java/com/project24/animexapp/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project24.animexapp\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.project24.animexapp.databinding.ActivityMainBinding\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityMainBinding\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        val db = Firebase.firestore\r\n        val navView: BottomNavigationView = binding.navView\r\n        val navAccount = binding.navAccount\r\n        val currentUserID = firebaseAuth.currentUser?.uid.toString()\r\n        val userName = \"\"\r\n        Toast.makeText(this, userName, Toast.LENGTH_SHORT).show()\r\n\r\n        if(firebaseAuth.currentUser !== null) {\r\n            navAccount.text = \"Welcome, \" + firebaseAuth.currentUser?.email.toString()\r\n        } else {\r\n            navAccount.text = \"\"\r\n        }\r\n        val navController = findNavController(R.id.nav_host_fragment_activity_main)\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n//        val appBarConfiguration = AppBarConfiguration(\r\n//            setOf(\r\n//                R.id.navigation_home, R.id.navigation_dashboard, R.id.navigation_notifications\r\n//            )\r\n//        )\r\n//        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n        //In an Async fashion, get all the info needed\r\n        //Trending Anime: Kitsu\r\n        //Ongoing Anime\r\n        //Recommended For You Details\r\n        //Explore Anime\r\n        /*\r\n        lifecycleScope.launch{\r\n            withContext(Dispatchers.IO){\r\n                Log.d(\"BEFORE\",\"HERE\")\r\n                getOngoingAnime()\r\n                Log.d(\"AFTER\",\"HERE\")\r\n                delay(1000)\r\n                Log.d(\"AFTER DELAY\",\"HERE\")\r\n            }\r\n        }\r\n\r\n         */\r\n    }\r\n    /*\r\n    private fun getOngoingAnime(){\r\n        val client = JikanApiClient.apiService.requestAnime(status = \"airing\")\r\n\r\n        client.enqueue(object: Callback<AnimeSearchResponse> {\r\n            override fun onResponse(\r\n                call: Call<AnimeSearchResponse>,\r\n                response: Response<AnimeSearchResponse>\r\n            ){\r\n                if(response.isSuccessful){\r\n                    if(response.body() != null){\r\n                        ongoingList = response.body()!!.result\r\n\r\n                        //PASS THE LIST TO THE ADAPTER AND REFRESH IT\r\n\r\n                        //ongoingAnimeAdapter.animeList = ongoingList\r\n                        //ongoingAnimeAdapter.notifyDataSetChanged()\r\n                        //viewModel.ongoingList.value = ongoingList\r\n\r\n                        //Log.d(\"ONGOING ANIME\",\"\"+ viewModel.ongoingList.value)\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<AnimeSearchResponse>, t: Throwable) {\r\n                Log.e(\"ONGOING ANIME API FAIL\",\"\"+t.message)\r\n            }\r\n        })\r\n    }\r\n    */\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/project24/animexapp/MainActivity.kt b/app/src/main/java/com/project24/animexapp/MainActivity.kt
--- a/app/src/main/java/com/project24/animexapp/MainActivity.kt	(revision 92e96564aeb2b93c9300942773e15672c9f53c35)
+++ b/app/src/main/java/com/project24/animexapp/MainActivity.kt	(date 1670029927315)
@@ -30,7 +30,6 @@
         val navAccount = binding.navAccount
         val currentUserID = firebaseAuth.currentUser?.uid.toString()
         val userName = ""
-        Toast.makeText(this, userName, Toast.LENGTH_SHORT).show()
 
         if(firebaseAuth.currentUser !== null) {
             navAccount.text = "Welcome, " + firebaseAuth.currentUser?.email.toString()
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"11\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 92e96564aeb2b93c9300942773e15672c9f53c35)
+++ b/.idea/gradle.xml	(date 1670274480101)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m___Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m___Changes_.xml
new file mode 100644
--- /dev/null	(date 1670274480050)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m___Changes_.xml	(date 1670274480050)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]" date="1670026560620" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2022-12-02 4:15 p.m. [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1670026559590)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-12-02_4_15_p_m__[Changes]/shelved.patch	(date 1670026559590)
@@ -0,0 +1,82 @@
+Index: app/src/main/java/com/project24/animexapp/ui/community/Feed.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.project24.animexapp.ui.community\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.project24.animexapp.*\r\nimport com.project24.animexapp.databinding.FragmentFeedBinding\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass Feed : Fragment() {\r\n    private var _binding: FragmentFeedBinding? = null\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n    private val binding get() = _binding!!\r\n    private lateinit var postsList: List<Posts>\r\n    private lateinit var postsRV: RecyclerView\r\n    private lateinit var postsAdapter: PostAdapter\r\n    private var mContext: Context? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        val db = Firebase.firestore\r\n\r\n        _binding = FragmentFeedBinding.inflate(inflater, container, false)\r\n        val root: View = binding.root\r\n        val communityPostButton = binding.communityPostButton\r\n        val communityUserPost = binding.communityUserPost.text.toString()\r\n        val setTagsButton = binding.setTagsButton\r\n        val linkAnimeButton = binding.linkAnimeButton\r\n\r\n        communityPostButton.setOnClickListener {\r\n            createPost()\r\n        }\r\n        setPostsAdapter()\r\n        return root\r\n    }\r\n\r\n    private fun setPostsAdapter() {\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        val db = Firebase.firestore\r\n\r\n\r\n\r\n        db.collection(\"Posts\").orderBy(\"time\", Query.Direction.DESCENDING).addSnapshotListener { snapshot, error ->\r\n            if( error != null) {\r\n                Log.e(TAG, \"onEvent: \", error)\r\n                return@addSnapshotListener\r\n            }\r\n\r\n\r\n            postsList = emptyList()\r\n            postsRV = binding.postsRecycler\r\n            postsAdapter = PostAdapter(postsList)\r\n            postsRV.layoutManager = LinearLayoutManager (mContext?.applicationContext,\r\n                LinearLayoutManager.VERTICAL, false\r\n            )\r\n\r\n            postsRV.adapter = postsAdapter\r\n\r\n            for(doc in snapshot!!) {\r\n                val postUser = doc.getString(\"username\")\r\n                val postText = doc.getString(\"postText\")\r\n                val postTime = doc.getString(\"time\")\r\n                val postDate = doc.getString(\"date\")\r\n                val postLikesCount = doc.getLong(\"likes\")\r\n                val postCommentsCount = doc.getLong(\"commentsNum\")\r\n                val postId = doc.getString(\"postId\")\r\n                postsList = postsList + Posts(postText, \"\", \"\", \"\", postUser, postTime, postDate, postLikesCount?.toInt(), postCommentsCount?.toInt(), postId)\r\n                postsAdapter.postList = postsList\r\n                postsAdapter.run {\r\n                    notifyDataSetChanged()\r\n                }\r\n            }\r\n//            Log.d(TAG, \"Current names: $posts\")\r\n        }\r\n    }\r\n\r\n    private fun createPost() {\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        val db = Firebase.firestore\r\n        postsRV.adapter = postsAdapter\r\n\r\n        val currentUserID = firebaseAuth.currentUser?.uid\r\n        val communityUserPost = binding.communityUserPost.text.toString()\r\n        val userPost = binding.communityUserPost\r\n        var currentUsername: String\r\n        val sdf = SimpleDateFormat(\"MM/dd/yyyy hh:mm:ss\")\r\n        val currentTime = sdf.format(Date())\r\n        val sdfDate = SimpleDateFormat(\"MM/dd/yyyy\")\r\n        val currentDate = sdfDate.format(Date())\r\n        var postId: Int\r\n\r\n        if(userPost.text.isEmpty()) {\r\n                Toast.makeText(activity, \"You need to write something before posting\", Toast.LENGTH_SHORT).show()\r\n        }\r\n        else {\r\n            val docRef = db.collection(\"Users\").document(currentUserID!!)\r\n            docRef.get().addOnSuccessListener { document ->\r\n                if(document!=null) {\r\n                    currentUsername = document.data?.get(\"username\").toString()\r\n                    db.collection(\"Posts\").document(postsList.size.toString()).set(Posts(communityUserPost, \"\", \"\", \"\", currentUsername, currentTime, currentDate,0, 0, postsList.size.toString()))\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n        userPost.text.clear()\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/project24/animexapp/ui/community/Feed.kt b/app/src/main/java/com/project24/animexapp/ui/community/Feed.kt
+--- a/app/src/main/java/com/project24/animexapp/ui/community/Feed.kt	(revision 7c41e64f54f6185177827bf30c6e45ebb7e16886)
++++ b/app/src/main/java/com/project24/animexapp/ui/community/Feed.kt	(date 1669789833988)
+@@ -54,15 +54,12 @@
+         firebaseAuth = FirebaseAuth.getInstance()
+         val db = Firebase.firestore
+ 
+-
+-
+         db.collection("Posts").orderBy("time", Query.Direction.DESCENDING).addSnapshotListener { snapshot, error ->
+             if( error != null) {
+                 Log.e(TAG, "onEvent: ", error)
+                 return@addSnapshotListener
+             }
+ 
+-
+             postsList = emptyList()
+             postsRV = binding.postsRecycler
+             postsAdapter = PostAdapter(postsList)
+@@ -121,9 +118,5 @@
+         }
+         userPost.text.clear()
+ 
+-
+     }
+-
+-
+-
+ }
+Index: app/src/main/java/com/project24/animexapp/LogInActivity.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.project24.animexapp\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.project24.animexapp.databinding.ActivityLogInBinding\r\n\r\nclass LogInActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding:ActivityLogInBinding\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val db = Firebase.firestore\r\n        binding = ActivityLogInBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        binding.signUpBtn.setOnClickListener {\r\n            val intent = Intent(this, RegisterActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.logInBtn.setOnClickListener {\r\n            val userEmail = binding.emailInput.text.toString()\r\n            val userPass = binding.passwordInput.text.toString()\r\n\r\n\r\n            if (userEmail.isNotEmpty() && userPass.isNotEmpty()) {\r\n                firebaseAuth.signInWithEmailAndPassword(userEmail, userPass).addOnCompleteListener {\r\n                    if(it.isSuccessful) {\r\n                        Toast.makeText(this, \"Logged in successfully\", Toast.LENGTH_SHORT).show()\r\n\r\n\r\n                        val intent = Intent(this, MainActivity::class.java)\r\n                        startActivity(intent)\r\n\r\n                    } else {\r\n                        Toast.makeText(this, it.exception.toString(), Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            } else {\r\n                Toast.makeText(this, \"All fields must be filled\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/project24/animexapp/LogInActivity.kt b/app/src/main/java/com/project24/animexapp/LogInActivity.kt
+--- a/app/src/main/java/com/project24/animexapp/LogInActivity.kt	(revision 7c41e64f54f6185177827bf30c6e45ebb7e16886)
++++ b/app/src/main/java/com/project24/animexapp/LogInActivity.kt	(date 1669788677273)
+@@ -20,6 +20,7 @@
+         val db = Firebase.firestore
+         binding = ActivityLogInBinding.inflate(layoutInflater)
+         setContentView(binding.root)
++
+         firebaseAuth = FirebaseAuth.getInstance()
+         binding.signUpBtn.setOnClickListener {
+             val intent = Intent(this, RegisterActivity::class.java)
+Index: .idea/deploymentTargetDropDown.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
+deleted file mode 100644
+--- a/.idea/deploymentTargetDropDown.xml	(revision 7c41e64f54f6185177827bf30c6e45ebb7e16886)
++++ /dev/null	(revision 7c41e64f54f6185177827bf30c6e45ebb7e16886)
+@@ -1,17 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<project version="4">
+-  <component name="deploymentTargetDropDown">
+-    <targetSelectedWithDropDown>
+-      <Target>
+-        <type value="QUICK_BOOT_TARGET" />
+-        <deviceKey>
+-          <Key>
+-            <type value="VIRTUAL_DEVICE_PATH" />
+-            <value value="C:\Users\matth\.android\avd\Pixel_4_API_29.avd" />
+-          </Key>
+-        </deviceKey>
+-      </Target>
+-    </targetSelectedWithDropDown>
+-    <timeTargetWasSelectedWithDropDown value="2022-11-29T00:51:01.635573400Z" />
+-  </component>
+-</project>
+\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1669788686091)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]/shelved.patch	(date 1669788686091)
@@ -0,0 +1,19 @@
+Index: .idea/misc.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/misc.xml b/.idea/misc.xml
+--- a/.idea/misc.xml	
++++ b/.idea/misc.xml	
+@@ -1,7 +1,7 @@
+ <?xml version="1.0" encoding="UTF-8"?>
+ <project version="4">
+   <component name="ExternalStorageConfigurationManager" enabled="true" />
+-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
++  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+     <output url="file://$PROJECT_DIR$/build/classes" />
+   </component>
+   <component name="ProjectType">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1/shelved.patch
new file mode 100644
--- /dev/null	(date 1669788686092)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1/shelved.patch	(date 1669788686092)
@@ -0,0 +1,43 @@
+Index: app/src/main/java/com/project24/animexapp/LogInActivity.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.project24.animexapp\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.project24.animexapp.databinding.ActivityLogInBinding\r\n\r\nclass LogInActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding:ActivityLogInBinding\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val db = Firebase.firestore\r\n        binding = ActivityLogInBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        binding.signUpBtn.setOnClickListener {\r\n            val intent = Intent(this, RegisterActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.logInBtn.setOnClickListener {\r\n            val userEmail = binding.emailInput.text.toString()\r\n            val userPass = binding.passwordInput.text.toString()\r\n\r\n\r\n            if (userEmail.isNotEmpty() && userPass.isNotEmpty()) {\r\n                firebaseAuth.signInWithEmailAndPassword(userEmail, userPass).addOnCompleteListener {\r\n                    if(it.isSuccessful) {\r\n                        Toast.makeText(this, \"Logged in successfully\", Toast.LENGTH_SHORT).show()\r\n\r\n\r\n                        val intent = Intent(this, MainActivity::class.java)\r\n                        startActivity(intent)\r\n\r\n                    } else {\r\n                        Toast.makeText(this, it.exception.toString(), Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            } else {\r\n                Toast.makeText(this, \"All fields must be filled\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/project24/animexapp/LogInActivity.kt b/app/src/main/java/com/project24/animexapp/LogInActivity.kt
+--- a/app/src/main/java/com/project24/animexapp/LogInActivity.kt	
++++ b/app/src/main/java/com/project24/animexapp/LogInActivity.kt	
+@@ -20,6 +20,7 @@
+         val db = Firebase.firestore
+         binding = ActivityLogInBinding.inflate(layoutInflater)
+         setContentView(binding.root)
++
+         firebaseAuth = FirebaseAuth.getInstance()
+         binding.signUpBtn.setOnClickListener {
+             val intent = Intent(this, RegisterActivity::class.java)
+Index: .idea/deploymentTargetDropDown.xml
+===================================================================
+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
+deleted file mode 100644
+--- a/.idea/deploymentTargetDropDown.xml	
++++ /dev/null	
+@@ -1,17 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<project version="4">
+-  <component name="deploymentTargetDropDown">
+-    <targetSelectedWithDropDown>
+-      <Target>
+-        <type value="QUICK_BOOT_TARGET" />
+-        <deviceKey>
+-          <Key>
+-            <type value="VIRTUAL_DEVICE_PATH" />
+-            <value value="C:\Users\matth\.android\avd\Pixel_4_API_29.avd" />
+-          </Key>
+-        </deviceKey>
+-      </Target>
+-    </targetSelectedWithDropDown>
+-    <timeTargetWasSelectedWithDropDown value="2022-11-29T00:51:01.635573400Z" />
+-  </component>
+-</project>
+\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_1.xml
new file mode 100644
--- /dev/null	(date 1670274480047)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_1.xml	(date 1670274480047)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1" date="1669788686092" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]1/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2022-11-29 10:11 p.m. [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_.xml
new file mode 100644
--- /dev/null	(date 1670274480038)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m___Changes_.xml	(date 1670274480038)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]" date="1669788676892" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-29_10_11_p_m__[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2022-11-29 10:11 p.m. [Changes]" />
+</changelist>
\ No newline at end of file
